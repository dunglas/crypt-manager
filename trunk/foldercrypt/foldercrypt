#!/usr/bin/python
# vim: set fileencoding=utf-8 :
# Copyright (C) 2007 Kévin Dunglas <dunglas@gmail.com>
#
# Authors:
#  Kévin Dunglas
#
# This program is a part of a the Google Summer Of Code 2007
# For futher information see :
# http://code.google.com/soc/ubuntu/appinfo.html?csaid=EF4FCF874D88234
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA

import os
import sys
import gettext
import locale
import foldercrypt

import __builtin__
__builtin__._ = gettext.gettext

APPNAME="foldercrypt"
APPVERSION="0.0.2"
CACHE = os.environ['HOME'] + "/.foldercrypt/cache"


def exit(para=0):
    data.save()
    sys.exit(para)


if __name__ == '__main__':
    data = foldercrypt.Data()
    folders = data.folders
    folders.clean()
    
    # Command Line Interface
    if len(sys.argv) == 2 and sys.argv[1] == "--help":
        msg = _("""%s, an encrypted folder manager
Options:
--crypt DIRECTORY       encrypt directory
--change-pass DIRECTORY change a password
--open DIRECTORY [IDLE] open an encrypted folder, close after IDLE (in minutes)
--help                  display this help message
--close DIRECTORY       close an encrypted folder
--decrypt DIRECTORY     decrypt encrypted folder
--version               display version information""") % APPNAME
        exit(msg)

    elif len(sys.argv) >= 2 and sys.argv[1] == "--info":
        if len(sys.argv) == 2:
            print _("Folder list:")
            print folders.li
        if len(sys.argv) == 3:
            print _("Open:")
            print folders.get(sys.argv[2]).opened
            print _("Digest:")
            print folders.get(sys.argv[2]).digest
        
    elif len(sys.argv) == 2 and sys.argv[1] == "--version":
        msg = APPNAME + " " + APPVERSION
        exit(msg)
    
    elif len(sys.argv) == 2 and sys.argv[1] == "--clean":
        folders.clean()
        exit()

    elif len(sys.argv) == 3 and sys.argv[1] == "--crypt":
        password = raw_input("Password: ")
        folder = foldercrypt.Folder(sys.argv[2])
        try:
            foldercrypt.Manage(folder).crypt(password)
        except foldercrypt.AlreadyEncrypted:
            exit(_( "%s is already a crypted folder.") % folder.path)
        else:
            folders.add(folder)
            exit()

    elif len(sys.argv) == 3 and sys.argv[1] == "--change-pass":
        try:
            folder = folders.get(sys.argv[2])
        except foldercrypt.NoEncrypted:
            exit(_("%s is not a crypted directory.") % folder.path)
        old = raw_input(_("Old password: "))
        new = raw_input(_("New password: "))
        confirmation = raw_input(_("Confirmation: "))
        if not new == confirmation:
            exit(_("Password do not match with is confirmation."))
        try:
            foldercrypt.Manage(folder).change_password(old, new)
        except foldercrypt.BadPassword:
            exit(_("Wrong password."))
            

    elif len(sys.argv) == 3 and sys.argv[1] == "--close":
        try:
            folder = folders.get(sys.argv[2])
        except foldercrypt.NoEncrypted:
            exit(_("%s is not a crypted directory.") % folder.path)
        try:
            folder = foldercrypt.Manage(folder).unmount()
        except foldercrypt.NotOpened:
            exit(_("%s folder is not opened.") % folder.path)
        folders.update(folder)
        exit()

    elif (len(sys.argv) == 3 or len(sys.argv) == 4) and sys.argv[1] == "--open":
        try:
            folder = folders.get(sys.argv[2])
        except foldercrypt.NoEncrypted:
            exit(_("%s is not a crypted directory.") % folder.path)
        password = raw_input("Password: ")
        if len(sys.argv) == 4 and sys.argv[3].isdigit():
            idle = 4
        else:
            idle = None
        try:
            folder = foldercrypt.Manage(folder).mount(password, idle)
        except foldercrypt.AlreadyOpened:
            exit(_("%s is already opened.") % folder.path)
        except foldercrypt.BadPassword:
            exit(_("Your password is wrong."))
        else:
            folders.update(folder)
            exit()

    elif len(sys.argv) == 3 and sys.argv[1] == "--decrypt":
        try:
            folder = folders.get(sys.argv[2])
        except foldercrypt.AlreadyOpened:
            exit(_(" is already opened.") % folder.path)
        password = raw_input(_("Password: "))
        try:
            foldercrypt.Manage(folder).decrypt(password)
        except foldercrypt.BadPassword:
            exit(_("Your password is wrong."))
        #folders.rem(folder)
        exit()

    else:
        msg = _("""Invalid option
Try « %s --help » to get more information""") % APPNAME
        exit(msg)
