#summary The cryptmanager.py Python module
#labels Phase-Implementation
= Introduction =

_cryptmanger.py_ is a Python module wich allow to manage an encrypted folder list, encrypt, open, close and uncrypt folders.


= Details =

_cryptmanager.py_ is composed of 3 public classes (and some privates classes, see the code for details):
  * Folder: basics data representing a folder
  * Folders: list of folders and operations on list
  * Manage: operations on a folder

== Folder ==

_Folder(path, size, loop=None)_
  * _path_ represent the full path to the mount point (the encrypted directory)
  * _size_ is the size (in Mb) of the encrypted image
  * _loop_ is the loopback device used when the encrypted image is mounted on the mountpoint

_Folder_ has one public method:_
  * _digest()_ return the sha256 hash of the path name.

== Folders ==

_Folders()_
  * _li_ is a list of _Folder_

_Folder has 4 publics methods:_
  * _add(folder)_ add a _Folder_ to the list _li_. Raise an _AlreadyExists_ exception if the _Folder_ is already in the list.
  * _rem(folder)_ remvoe a _Folder_ of the list _li_
  * _update(folder)_ update a _Folder_ which the list _li_ contain
  * _get(path)_ return a _Folder_ if it is in the list. Either raise an _Uncrypted_ exception.

== Manage ==

_Manage(folder)_
  * Manage the specified _Folder_

_Manage has 4 publics methods:_
  * _crypt(password)_ encrypt the _Folder_ with _password_. Raise a _LoError_ exception if no loopback device available. Raise a _IMGexists_ exception if an ecrypted image already exists for this _Folder_.
  * _mount(password)_ open the _Folder_ to is _path_ using _password_. Raise a _BadPassword_ exception if the password is wrong.  Raise an _AlreadyOpened_ exception if the encrypted folder is already open.
  * _unmount()_ close the _Folder_. Raise a _NotOpened_ exception if the _Folder_ was not open.
  * _uncrypt(password)_ uncrypt the crypted _Folder_. Raise a _BadPassword_ exception if the password is wrong.